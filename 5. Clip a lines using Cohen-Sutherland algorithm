#include<stdio.h>
#include<GL/glut.h>
float xmin=100,ymin=100,xmax=200,ymax=200;
int bottom=1,left=2,top=4,right=8;

int compute(float x,float y){
int code = 0;
if(x<xmin) code = code | left;
if(x>xmax) code = code | right;
if(y<ymin) code = code | bottom;
if(y>ymax) code = code | top;
return code;
}

void clipping(float x1,float y1,float x2,float y2){
int code1,code2,codeout;
int done=0,accept=0;
float x,y;
code1 = compute(x1,y1);
code2 = compute(x2,y2);
printf("%d %d",code1,code2);

do{
if((code1 | code2) == 0){
done=1;accept=1;
}
else if((code1 & code2)){
done=1;
}
else{
if(code1) codeout=code1;
else codeout = code2;
if(codeout & left){
x = xmin;
y = y1 + (xmin-x1)*((y2-y1)/(x2-x1));
}
else if(codeout & right){
x = xmax;
y = y1 + (xmax-x1)*((y2-y1)/(x2-x1));
}
else if(codeout & bottom){
y = ymin;
x = x1 + (ymin-y1)*(1/((y2-y1)/(x2-x1)));
}
else{
y = ymax;
x = x1 + (ymax-y1)*(1/((y2-y1)/(x2-x1)));
}
if(codeout==code1){
x1=x;y1=y;
code1 = compute(x1,y1);
}
if(codeout==code2){
x2=x;y2=y;
code2 = compute(x2,y2);
}

}
}while(done==0);

if(accept){
glPushMatrix();
glTranslatef(120,120,0);
glColor3f(0,1,1);
glBegin(GL_LINE_LOOP);
glVertex2f(xmin,ymin);
glVertex2f(xmax,ymin);
glVertex2f(xmax,ymax);
glVertex2f(xmin,ymax);
glEnd();
glBegin(GL_LINES);
glVertex2f(x1,y1);
glVertex2f(x2,y2);
glEnd();
glPopMatrix();
}
}
void init(){
glMatrixMode(GL_PROJECTION);
   gluOrtho2D(0,500,0,500);
glMatrixMode(GL_MODELVIEW);
}

void display(){
float x1=120,y1=50,x2=160,y2=230;
float a1=150,b1=80,a2=190,b2=260;
float c1=10,d1=20,c2=90,d2=60;
glClearColor(1,1,1,1);
glClear(GL_COLOR_BUFFER_BIT);

glColor3f(1,0,0);
glBegin(GL_LINE_LOOP);
glVertex2f(xmin,ymin);
glVertex2f(xmax,ymin);
glVertex2f(xmax,ymax);
glVertex2f(xmin,ymax);
glEnd();

glBegin(GL_LINES);
glVertex2f(x1,y1);
glVertex2f(x2,y2);
glVertex2f(a1,b1);
glVertex2f(a2,b2);
glVertex2f(c1,d1);
glVertex2f(c2,d2);
glEnd();

clipping(x1,y1,x2,y2);
clipping(a1,b1,a2,b2);
clipping(c1,d1,c2,d2);
glFlush();
}

int main(int argc,char **argv){

glutInit(&argc,argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

glutInitWindowSize(500,500);
glutInitWindowPosition(0,0);
glutCreateWindow("1CR20CS151");

init();
glutDisplayFunc(display);

glutMainLoop();
return 0;
}
