#include<stdio.h>
#include<GL/glut.h>
float v[4][3] = {{0,0,1},{0,1,0},{-1,-1,0},{1,-1,0}};
int n;
void triangle(float a[3],float b[3],float c[3])
{
glBegin(GL_TRIANGLES);
glVertex3fv(a);
glVertex3fv(b);
glVertex3fv(c);
glEnd();
}

void divide_triangle(float a[3],float b[3],float c[3],int n)
{
float v1[3],v2[3],v3[3];
if(n>0)
{
for(int i=0;i<3;i++)
{
v1[i] = (a[i]+b[i])/2;
v2[i] = (b[i]+c[i])/2;
v3[i] = (a[i]+c[i])/2;
}
divide_triangle(a,v1,v3,n-1);
divide_triangle(b,v1,v2,n-1);
divide_triangle(c,v2,v3,n-1);
}
else
{
triangle(a,b,c);
}
}

void tetrahedron()
{
glColor3f(1,1,0);
divide_triangle(v[0],v[1],v[3],n);
glColor3f(1,0,1);
divide_triangle(v[0],v[1],v[2],n);
glColor3f(0,1,0);
divide_triangle(v[0],v[2],v[3],n);
glColor3f(1,0,0);
divide_triangle(v[1],v[2],v[3],n);
}
//mapping details
void init(){
glMatrixMode(GL_PROJECTION);
   glOrtho(-2,2,-2,2,-2,2);
glMatrixMode(GL_MODELVIEW);
}

//object

void display(){
glClearColor(1,1,1,1);
glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

tetrahedron();

glFlush();
}

//main function
int main(int argc,char **argv){

printf("enter the no_of_divisions : ");
scanf("%d",&n);

glutInit(&argc,argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB  | GLUT_DEPTH);

glutInitWindowSize(500,500);
glutInitWindowPosition(0,0);
glutCreateWindow("1CR20CS191");

init();
glutDisplayFunc(display);

glEnable(GL_DEPTH_TEST);
glutMainLoop();
return 0;
}
